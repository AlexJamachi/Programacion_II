- Encapsulamiento (Una caja):
El encapsulamiento agrupa los datos (atributos) y los métodos (comportamientos) que los manipulan dentro de una sola unidad llamada "objeto". Esto protege los datos de modificaciones accidentales desde fuera de la clase, aumentando la seguridad y la integridad del programa.
Es la acción de empaquetar todo en un objeto. Imaginar en ello como crear una caja que contiene tanto los datos (atributos) como las herramientas para manejarlos (métodos). La caja en sí misma es el encapsulamiento.

- Ocultamiento (La Cerradura): 
Es la estrategia de control de acceso a lo que está dentro de la caja. Al ocultar la información (usando modificadores como private), decides qué partes del objeto son accesibles desde el exterior y cuáles no. Es la cerradura que pones en la caja para que nadie pueda modificar su contenido de forma indebida.

- Abstracción:
La abstracción consiste en ocultar los detalles complejos de implementación y mostrar solo la funcionalidad esencial de un objeto. Piensa en el control remoto de una TV: sabes que el botón de "subir volumen" funciona, pero no necesitas conocer los circuitos internos que lo hacen posible. Esto simplifica el uso de los objetos.

- Herencia:
La herencia permite que una clase herede atributos y métodos de otra clase, lo que promueve la reutilización del código y crea una jerarquía lógica. Por ejemplo, las clases Perro y Gato pueden heredar características comunes de una clase Animal, evitando tener que reescribir esas características en cada una.

- Polimorfismo:
El polimorfismo (que significa "muchas formas") permite que objetos de diferentes clases respondan al mismo mensaje de maneras distintas. Por ejemplo, una orden hacerSonido() podría hacer que un objeto Perro ladre, mientras que un objeto Gato maullará. Esto hace que el código sea más flexible y escalable.